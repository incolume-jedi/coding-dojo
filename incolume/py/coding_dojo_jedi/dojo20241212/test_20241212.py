"""Test module."""

from typing import ClassVar, NoReturn
import incolume.py.coding_dojo_jedi.dojo20241212 as pkg
import pytest
import numpy as np
from icecream import ic


class TestSolucionadorSudoku:
    """Test case class."""

    obj: pkg.SudokuSolver = pkg.SudokuSolver()

    @pytest.mark.parametrize(
        'entrance expected'.split(),
        [
            pytest.param(
                {
                    'sudoku': [
                        ['5', '3', '.', '.', '7', '.', '.', '.', '.'],
                        ['6', '.', '.', '1', '9', '5', '.', '.', '.'],
                        ['.', '9', '8', '.', '.', '.', '.', '6', '.'],
                        ['8', '.', '.', '6', '.', '.', '3', '.', '.'],
                        ['4', '.', '.', '8', '.', '3', '.', '1', '.'],
                        ['7', '.', '.', '.', '2', '.', '.', '6', '.'],
                        ['.', '6', '.', '.', '.', '.', '2', '8', '.'],
                        ['.', '.', '4', '1', '9', '.', '.', '5', '.'],
                        ['.', '.', '.', '.', '8', '.', '.', '7', '9'],
                    ],
                    'x': 2,
                    'y': 5,
                },
                [
                    ['.', '7', '.'],
                    ['1', '9', '5'],
                    ['.', '.', '.'],
                ],
            ),
            pytest.param(
                {
                    'sudoku': [
                        ['5', '3', '.', '.', '7', '.', '.', '.', '.'],
                        ['6', '.', '.', '1', '9', '5', '.', '.', '.'],
                        ['.', '9', '8', '.', '.', '.', '.', '6', '.'],
                        ['8', '.', '.', '6', '.', '.', '3', '.', '.'],
                        ['4', '.', '.', '8', '.', '3', '.', '1', '.'],
                        ['7', '.', '.', '.', '2', '.', '.', '6', '.'],
                        ['.', '6', '.', '.', '.', '.', '2', '8', '.'],
                        ['.', '.', '4', '1', '9', '.', '.', '5', '.'],
                        ['.', '.', '.', '.', '8', '.', '.', '7', '9'],
                    ],
                    'x': 1,
                    'y': 3,
                },
                [
                    ['.', '7', '.'],
                    ['1', '9', '5'],
                    ['.', '.', '.'],
                ],
            ),
            pytest.param(
                {
                    'sudoku': [
                        ['5', '3', '.', '.', '7', '.', '.', '.', '.'],
                        ['6', '.', '.', '1', '9', '5', '.', '.', '.'],
                        ['.', '9', '8', '.', '.', '.', '.', '6', '.'],
                        ['8', '.', '.', '6', '.', '.', '3', '.', '.'],
                        ['4', '.', '.', '8', '.', '3', '.', '1', '.'],
                        ['7', '.', '.', '.', '2', '.', '.', '6', '.'],
                        ['.', '6', '.', '.', '.', '.', '2', '8', '.'],
                        ['.', '.', '4', '1', '9', '.', '.', '5', '.'],
                        ['.', '.', '.', '.', '8', '.', '.', '7', '9'],
                    ],
                    'x': 2,
                    'y': 3,
                },
                [
                    ['.', '7', '.'],
                    ['1', '9', '5'],
                    ['.', '.', '.'],
                ],
            ),
            pytest.param(
                {
                    'sudoku': [
                        ['5', '3', '.', '.', '7', '.', '.', '.', '.'],
                        ['6', '.', '.', '1', '9', '5', '.', '.', '.'],
                        ['.', '9', '8', '.', '.', '.', '.', '6', '.'],
                        ['8', '.', '.', '6', '.', '.', '3', '.', '.'],
                        ['4', '.', '.', '8', '.', '3', '.', '1', '.'],
                        ['7', '.', '.', '.', '2', '.', '.', '6', '.'],
                        ['.', '6', '.', '.', '.', '.', '2', '8', '.'],
                        ['.', '.', '4', '1', '9', '.', '.', '5', '.'],
                        ['.', '.', '.', '.', '8', '.', '.', '7', '9'],
                    ],
                    'x': 0,
                    'y': 3,
                },
                [
                    ['.', '7', '.'],
                    ['1', '9', '5'],
                    ['.', '.', '.'],
                ],
            ),
            pytest.param(
                {
                    'sudoku': [
                        ['5', '3', '.', '.', '7', '.', '.', '.', '.'],
                        ['6', '.', '.', '1', '9', '5', '.', '.', '.'],
                        ['.', '9', '8', '.', '.', '.', '.', '6', '.'],
                        ['8', '.', '.', '6', '.', '.', '3', '.', '.'],
                        ['4', '.', '.', '8', '.', '3', '.', '1', '.'],
                        ['7', '.', '.', '.', '2', '.', '.', '6', '.'],
                        ['.', '6', '.', '.', '.', '.', '2', '8', '.'],
                        ['.', '.', '4', '1', '9', '.', '.', '5', '.'],
                        ['.', '.', '.', '.', '8', '.', '.', '7', '9'],
                    ],
                    'x': 0,
                    'y': 0,
                },
                [
                    ['5', '3', '.'],
                    ['6', '.', '.'],
                    ['.', '9', '8'],
                ],
            ),
        ],
    )
    def test_0(self, entrance, expected) -> NoReturn:
        """Unittest."""
        response = self.obj.check_quadrant(**entrance)
        ic(response)
        ic(expected)
        assert np.array_equal(response, expected)
