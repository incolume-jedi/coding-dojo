"""Test module."""

from typing import ClassVar, NoReturn, TypeAlias
import incolume.py.coding_dojo_jedi.dojo20241212 as pkg
import pytest
import numpy as np
from icecream import ic


class TestSolucionadorSudoku:
    """Test case class."""

    obj: pkg.SudokuSolver = pkg.SudokuSolver()
    matriz: ClassVar[Board] = [
        ['5', '3', '.', '.', '7', '.', '.', '.', '.'],
        ['6', '.', '.', '1', '9', '5', '.', '.', '.'],
        ['.', '9', '8', '.', '.', '.', '.', '6', '.'],
        ['8', '.', '.', '6', '.', '.', '3', '.', '.'],
        ['4', '.', '.', '8', '.', '3', '.', '1', '.'],
        ['7', '.', '.', '.', '2', '.', '.', '6', '.'],
        ['.', '6', '.', '.', '.', '.', '2', '8', '.'],
        ['.', '.', '4', '1', '9', '.', '.', '5', '.'],
        ['.', '.', '.', '.', '8', '.', '.', '7', '9'],
    ]

    @pytest.mark.parametrize(
        'entrance expected'.split(),
        [
            pytest.param(
                {
                    'sudoku': [
                        ['5', '3', '.', '.', '7', '.', '.', '.', '.'],
                        ['6', '.', '.', '1', '9', '5', '.', '.', '.'],
                        ['.', '9', '8', '.', '.', '.', '.', '6', '.'],
                        ['8', '.', '.', '6', '.', '.', '3', '.', '.'],
                        ['4', '.', '.', '8', '.', '3', '.', '1', '.'],
                        ['7', '.', '.', '.', '2', '.', '.', '6', '.'],
                        ['.', '6', '.', '.', '.', '.', '2', '8', '.'],
                        ['.', '.', '4', '1', '9', '.', '.', '5', '.'],
                        ['.', '.', '.', '.', '8', '.', '.', '7', '9'],
                    ],
                    'x': 2,
                    'y': 5,
                },
                [
                    [0, 7, 0],
                    [1, 9, 5],
                    [0, 0, 0],
                ],
            ),
            pytest.param(
                {
                    'sudoku': [
                        ['5', '3', '.', '.', '7', '.', '.', '.', '.'],
                        ['6', '.', '.', '1', '9', '5', '.', '.', '.'],
                        ['.', '9', '8', '.', '.', '.', '.', '6', '.'],
                        ['8', '.', '.', '6', '.', '.', '3', '.', '.'],
                        ['4', '.', '.', '8', '.', '3', '.', '1', '.'],
                        ['7', '.', '.', '.', '2', '.', '.', '6', '.'],
                        ['.', '6', '.', '.', '.', '.', '2', '8', '.'],
                        ['.', '.', '4', '1', '9', '.', '.', '5', '.'],
                        ['.', '.', '.', '.', '8', '.', '.', '7', '9'],
                    ],
                    'x': 1,
                    'y': 3,
                },
                [
                    [0, 7, 0],
                    [1, 9, 5],
                    [0, 0, 0],
                ],
            ),
            pytest.param(
                {
                    'sudoku': [
                        ['5', '3', '.', '.', '7', '.', '.', '.', '.'],
                        ['6', '.', '.', '1', '9', '5', '.', '.', '.'],
                        ['.', '9', '8', '.', '.', '.', '.', '6', '.'],
                        ['8', '.', '.', '6', '.', '.', '3', '.', '.'],
                        ['4', '.', '.', '8', '.', '3', '.', '1', '.'],
                        ['7', '.', '.', '.', '2', '.', '.', '6', '.'],
                        ['.', '6', '.', '.', '.', '.', '2', '8', '.'],
                        ['.', '.', '4', '1', '9', '.', '.', '5', '.'],
                        ['.', '.', '.', '.', '8', '.', '.', '7', '9'],
                    ],
                    'x': 2,
                    'y': 3,
                },
                [
                    [0, 7, 0],
                    [1, 9, 5],
                    [0, 0, 0],
                ],
            ),
            pytest.param(
                {
                    'sudoku': [
                        ['5', '3', '.', '.', '7', '.', '.', '.', '.'],
                        ['6', '.', '.', '1', '9', '5', '.', '.', '.'],
                        ['.', '9', '8', '.', '.', '.', '.', '6', '.'],
                        ['8', '.', '.', '6', '.', '.', '3', '.', '.'],
                        ['4', '.', '.', '8', '.', '3', '.', '1', '.'],
                        ['7', '.', '.', '.', '2', '.', '.', '6', '.'],
                        ['.', '6', '.', '.', '.', '.', '2', '8', '.'],
                        ['.', '.', '4', '1', '9', '.', '.', '5', '.'],
                        ['.', '.', '.', '.', '8', '.', '.', '7', '9'],
                    ],
                    'x': 0,
                    'y': 3,
                },
                [
                    [0, 7, 0],
                    [1, 9, 5],
                    [0, 0, 0],
                ],
            ),
            pytest.param(
                {
                    'sudoku': [
                        ['5', '3', '.', '.', '7', '.', '.', '.', '.'],
                        ['6', '.', '.', '1', '9', '5', '.', '.', '.'],
                        ['.', '9', '8', '.', '.', '.', '.', '6', '.'],
                        ['8', '.', '.', '6', '.', '.', '3', '.', '.'],
                        ['4', '.', '.', '8', '.', '3', '.', '1', '.'],
                        ['7', '.', '.', '.', '2', '.', '.', '6', '.'],
                        ['.', '6', '.', '.', '.', '.', '2', '8', '.'],
                        ['.', '.', '4', '1', '9', '.', '.', '5', '.'],
                        ['.', '.', '.', '.', '8', '.', '.', '7', '9'],
                    ],
                    'x': 0,
                    'y': 0,
                },
                [
                    [5, 3, 0],
                    [6, 0, 0],
                    [0, 9, 8],
                ],
            ),
        ],
    )
    def test_quadrante(self, entrance, expected) -> NoReturn:
        """Unittest."""
        response = self.obj.check_quadrant(**entrance)
        ic(response)
        ic(expected)
        assert np.array_equal(response, expected)

    @pytest.mark.parametrize(
        'entrance expected'.split(),
        [
            pytest.param(
                {
                    'sudoku': [
                        ['5', '3', '.', '.', '7', '.', '.', '.', '.'],
                        ['6', '.', '.', '1', '9', '5', '.', '.', '.'],
                        ['.', '9', '8', '.', '.', '.', '.', '6', '.'],
                        ['8', '.', '.', '6', '.', '.', '3', '.', '.'],
                        ['4', '.', '.', '8', '.', '3', '.', '1', '.'],
                        ['7', '.', '.', '.', '2', '.', '.', '6', '.'],
                        ['.', '6', '.', '.', '.', '.', '2', '8', '.'],
                        ['.', '.', '4', '1', '9', '.', '.', '5', '.'],
                        ['.', '.', '.', '.', '8', '.', '.', '7', '9'],
                    ],
                    'x': 0,
                    'y': 2,
                    'value': 9,
                },
                False,
                marks=[pytest.mark.skip],
            ),
            pytest.param(
                {
                    'sudoku': [
                        ['5', '3', '.', '.', '7', '.', '.', '.', '.'],
                        ['6', '.', '.', '1', '9', '5', '.', '.', '.'],
                        ['.', '9', '8', '.', '.', '.', '.', '6', '.'],
                        ['8', '.', '.', '6', '.', '.', '3', '.', '.'],
                        ['4', '.', '.', '8', '.', '3', '.', '1', '.'],
                        ['7', '.', '.', '.', '2', '.', '.', '6', '.'],
                        ['.', '6', '.', '.', '.', '.', '2', '8', '.'],
                        ['.', '.', '4', '1', '9', '.', '.', '5', '.'],
                        ['.', '.', '.', '.', '8', '.', '.', '7', '9'],
                    ],
                    'x': 0,
                    'y': 2,
                    'value': 3,
                },
                False,
            ),
            pytest.param(
                {
                    'sudoku': [
                        ['5', '3', '.', '.', '7', '.', '.', '.', '.'],
                        ['6', '.', '.', '1', '9', '5', '.', '.', '.'],
                        ['.', '9', '8', '.', '.', '.', '.', '6', '.'],
                        ['8', '.', '.', '6', '.', '.', '3', '.', '.'],
                        ['4', '.', '.', '8', '.', '3', '.', '1', '.'],
                        ['7', '.', '.', '.', '2', '.', '.', '6', '.'],
                        ['.', '6', '.', '.', '.', '.', '2', '8', '.'],
                        ['.', '.', '4', '1', '9', '.', '.', '5', '.'],
                        ['.', '.', '.', '.', '8', '.', '.', '7', '9'],
                    ],
                    'x': 0,
                    'y': 2,
                    'value': 5,
                },
                False,
            ),
            pytest.param(
                {
                    'sudoku': [
                        ['5', '3', '.', '.', '7', '.', '.', '.', '.'],
                        ['6', '.', '.', '1', '9', '5', '.', '.', '.'],
                        ['.', '9', '8', '.', '.', '.', '.', '6', '.'],
                        ['8', '.', '.', '6', '.', '.', '3', '.', '.'],
                        ['4', '.', '.', '8', '.', '3', '.', '1', '.'],
                        ['7', '.', '.', '.', '2', '.', '.', '6', '.'],
                        ['.', '6', '.', '.', '.', '.', '2', '8', '.'],
                        ['.', '.', '4', '1', '9', '.', '.', '5', '.'],
                        ['.', '.', '.', '.', '8', '.', '.', '7', '9'],
                    ],
                    'x': 0,
                    'y': 2,
                    'value': 7,
                },
                False,
            ),
            pytest.param(
                {
                    'sudoku': [
                        ['5', '3', '.', '.', '7', '.', '.', '.', '.'],
                        ['6', '.', '.', '1', '9', '5', '.', '.', '.'],
                        ['.', '9', '8', '.', '.', '.', '.', '6', '.'],
                        ['8', '.', '.', '6', '.', '.', '3', '.', '.'],
                        ['4', '.', '.', '8', '.', '3', '.', '1', '.'],
                        ['7', '.', '.', '.', '2', '.', '.', '6', '.'],
                        ['.', '6', '.', '.', '.', '.', '2', '8', '.'],
                        ['.', '.', '4', '1', '9', '.', '.', '5', '.'],
                        ['.', '.', '.', '.', '8', '.', '.', '7', '9'],
                    ],
                    'x': 0,
                    'y': 2,
                    'value': 2,
                },
                True,
                marks=[pytest.mark.skip],
            ),
            pytest.param(
                {
                    'sudoku': [
                        ['5', '3', '.', '.', '7', '.', '.', '.', '.'],
                        ['6', '.', '.', '1', '9', '5', '.', '.', '.'],
                        ['.', '9', '8', '.', '.', '.', '.', '6', '.'],
                        ['8', '.', '.', '6', '.', '.', '3', '.', '.'],
                        ['4', '.', '.', '8', '.', '3', '.', '1', '.'],
                        ['7', '.', '.', '.', '2', '.', '.', '6', '.'],
                        ['.', '6', '.', '.', '.', '.', '2', '8', '.'],
                        ['.', '.', '4', '1', '9', '.', '.', '5', '.'],
                        ['.', '.', '.', '.', '8', '.', '.', '7', '9'],
                    ],
                    'x': 0,
                    'y': 2,
                    'value': 1,
                },
                True,
                marks=[pytest.mark.skip],
            ),
        ],
    )
    def test_is_valid(self, entrance, expected) -> NoReturn:
        """Unittest."""
        assert self.obj.is_valid(**entrance) == expected

    @pytest.mark.parametrize(
        'entrance expected'.split(),
        [
            pytest.param(
                {
                    'sudoku': [
                        ['5', '3', '.', '.', '7', '.', '.', '.', '.'],
                        ['6', '.', '.', '1', '9', '5', '.', '.', '.'],
                        ['.', '9', '8', '.', '.', '.', '.', '6', '.'],
                        ['8', '.', '.', '6', '.', '.', '3', '.', '.'],
                        ['4', '.', '.', '8', '.', '3', '.', '1', '.'],
                        ['7', '.', '.', '.', '2', '.', '.', '6', '.'],
                        ['.', '6', '.', '.', '.', '.', '2', '8', '.'],
                        ['.', '.', '4', '1', '9', '.', '.', '5', '.'],
                        ['.', '.', '.', '.', '8', '.', '.', '7', '9'],
                    ],
                    'x': 0,
                    'y': 1,
                },
                [1, 9],
                marks=[pytest.mark.skip],
            ),
            pytest.param(
                {
                    'sudoku': [
                        ['5', '3', '.', '.', '7', '.', '.', '.', '.'],
                        ['6', '.', '.', '1', '9', '5', '.', '.', '.'],
                        ['.', '9', '8', '.', '.', '.', '.', '6', '.'],
                        ['8', '.', '.', '6', '.', '.', '3', '.', '.'],
                        ['4', '.', '.', '8', '.', '3', '.', '1', '.'],
                        ['7', '.', '.', '.', '2', '.', '.', '6', '.'],
                        ['.', '6', '.', '.', '.', '.', '2', '8', '.'],
                        ['.', '.', '4', '1', '9', '.', '.', '5', '.'],
                        ['.', '.', '.', '.', '8', '.', '.', '7', '9'],
                    ],
                    'x': 2,
                    'y': 1,
                },
                [4, 9],
                marks=[pytest.mark.skip],
            ),
            pytest.param(
                {
                    'sudoku': [
                        ['5', '3', '.', '.', '7', '.', '.', '.', '.'],
                        ['6', '.', '.', '1', '9', '5', '.', '.', '.'],
                        ['.', '9', '8', '.', '.', '.', '.', '6', '.'],
                        ['8', '.', '.', '6', '.', '.', '3', '.', '.'],
                        ['4', '.', '.', '8', '.', '3', '.', '1', '.'],
                        ['7', '.', '.', '.', '2', '.', '.', '6', '.'],
                        ['.', '6', '.', '.', '.', '.', '2', '8', '.'],
                        ['.', '.', '4', '1', '9', '.', '.', '5', '.'],
                        ['.', '.', '.', '.', '8', '.', '.', '7', '9'],
                    ],
                    'x': 1,
                    'y': 4,
                },
                [3, 4, 7],
                marks=[pytest.mark.skip],
            ),
            pytest.param(
                {
                    'sudoku': [
                        ['5', '3', '.', '.', '7', '.', '.', '.', '.'],
                        ['6', '.', '.', '1', '9', '5', '.', '.', '.'],
                        ['.', '9', '8', '.', '.', '.', '.', '6', '.'],
                        ['8', '.', '.', '6', '.', '.', '3', '.', '.'],
                        ['4', '.', '.', '8', '.', '3', '.', '1', '.'],
                        ['7', '.', '.', '.', '2', '.', '.', '6', '.'],
                        ['.', '6', '.', '.', '.', '.', '2', '8', '.'],
                        ['.', '.', '4', '1', '9', '.', '.', '5', '.'],
                        ['.', '.', '.', '.', '8', '.', '.', '7', '9'],
                    ],
                    'x': 3,
                    'y': 3,
                },
                [4, 7],
                marks=[pytest.mark.skip],
            ),
            pytest.param(
                {
                    'sudoku': [
                        ['5', '3', '.', '.', '7', '.', '.', '.', '.'],
                        ['6', '.', '.', '1', '9', '5', '.', '.', '.'],
                        ['.', '9', '8', '.', '.', '.', '.', '6', '.'],
                        ['8', '.', '.', '6', '.', '.', '3', '.', '.'],
                        ['4', '.', '.', '8', '.', '3', '.', '1', '.'],
                        ['7', '.', '.', '.', '2', '.', '.', '6', '.'],
                        ['.', '6', '.', '.', '.', '.', '2', '8', '.'],
                        ['.', '.', '4', '1', '9', '.', '.', '5', '.'],
                        ['.', '.', '.', '.', '8', '.', '.', '7', '9'],
                    ],
                    'x': 5,
                    'y': 5,
                },
                [2, 4, 7],
                marks=[pytest.mark.skip],
            ),
            pytest.param(
                {
                    'sudoku': matriz,
                    'x': 7,
                    'y': 1,
                },
                [6, 9],
                marks=[],
            ),
        ],
    )
    def test_possibilities(self, entrance, expected) -> NoReturn:
        """Unittest."""
        assert self.obj.possibilities(**entrance) == expected
